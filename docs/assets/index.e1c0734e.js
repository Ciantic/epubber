import{t as b,d as P,c as y,B as O,i as w,a as S,b as T,S as q,Z as H,e as N,T as $,r as R}from"./vendor.f9497a2c.js";const I=function(){const f=document.createElement("link").relList;if(f&&f.supports&&f.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const l of n)if(l.type==="childList")for(const u of l.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&a(u)}).observe(document,{childList:!0,subtree:!0});function c(n){const l={};return n.integrity&&(l.integrity=n.integrity),n.referrerpolicy&&(l.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?l.credentials="include":n.crossorigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function a(n){if(n.ep)return;n.ep=!0;const l=c(n);fetch(n.href,l)}};I();const U=b('<div><h1>Concats all the epub HTML files</h1><h2>Select epub file</h2><input type="file" name=""><h2>Or type fetchable URL</h2><input type="text" placeholder="URL"> <button type="button">Fetch</button><br></div>'),L=b("<div></div>"),D=b('<div class="html-page"></div>');function h(s,f){return new URL(s,new URL(f,"https://example.com")).pathname}const x=async s=>{const c=await new H(new N(s)).getEntries(),a=new Map(c.map(e=>["/"+e.filename,e])),n=c.filter(e=>e.filename.endsWith(".opf"));if(n.length!==1)throw new Error("OPF confusion");const u=await n[0].getData?.(new $),p=[...new DOMParser().parseFromString(u,"text/xml").querySelectorAll("manifest item")],d=p.filter(e=>e.getAttribute("media-type")?.match(/html/)).map(e=>e.getAttribute("href")||"\u2705").map(e=>{const o=a.get(h(e,"/OEBPS/"));if(o)return o;const t=a.get(h(e,"/"));if(t)return t}).filter(e=>e);if(d.length===0)throw console.error("OPF Items:",p,"ZIP File entries:",c.keys()),new Error("No HTML Files found from the ebook");return{documents:(await Promise.all(d.map(async e=>({content:await e.getData?.(new $),filename:e.filename})))).map(({content:e,filename:o})=>{let t=new DOMParser().parseFromString(e,"application/xhtml+xml");return t.querySelector("parsererror")&&(t=new DOMParser().parseFromString(e,"text/html")),t.querySelectorAll("[href]").forEach(r=>{r instanceof HTMLElement&&(r.dataset.href=h(r.getAttribute("href")||"",o),r.setAttribute("href","#"))}),t.querySelectorAll("[src]").forEach(r=>{r instanceof HTMLElement&&(r.dataset.src=h(r.getAttribute("src")||"",o),r.removeAttribute("src"))}),t.querySelectorAll("style").forEach(r=>{r.remove()}),t.querySelectorAll("[style]").forEach(r=>{r.removeAttribute("style")}),t.querySelectorAll("[class]").forEach(r=>{r.removeAttribute("class")}),t.querySelectorAll("[aria-hidden]").forEach(r=>{r.ariaHidden&&r.remove()}),t.querySelectorAll("div").forEach(r=>{r.id||r.replaceWith(...r.childNodes)}),t}),zipFileMap:a}},B=()=>{let s;const[f,c]=y(""),[a,n]=y([]),[l,u]=y(new Map),E=new IntersectionObserver(i=>{for(const e of i)if(e.target instanceof HTMLImageElement){const o=e.target;if(e.isIntersecting&&!o.hasAttribute("src")){const t=l().get(o.dataset.src||"");t&&(async()=>{const m=await t.getData?.(new O);m instanceof Blob&&(o.src=URL.createObjectURL(new File([m],t.filename)))})()}}});function g(i){setTimeout(()=>{i.querySelectorAll("img").forEach(e=>{E.observe(e)})})}async function p(){if(!s)return;const i=s.files?.[0];if(i){const{documents:e,zipFileMap:o}=await x(i);n(e),u(o)}}async function d(i){try{const e=await fetch(i),{documents:o,zipFileMap:t}=await x(await e.blob());n(o),u(t)}catch(e){e instanceof TypeError?c(e.name+": "+e.message):c("Unable to fetch")}}function v(){return(()=>{const i=U.cloneNode(!0),e=i.firstChild,o=e.nextSibling,t=o.nextSibling,m=t.nextSibling,r=m.nextSibling,_=r.nextSibling,F=_.nextSibling;F.nextSibling,t.$$input=p;const A=s;return typeof A=="function"?A(t):s=t,F.$$click=M=>{M.target.previousElementSibling instanceof HTMLInputElement&&d(M.target.previousElementSibling.value)},w(i,f,null),i})()}return(()=>{const i=L.cloneNode(!0);return w(i,S(q,{get when(){return a().length>0},fallback:()=>S(v,{}),get children(){const e=L.cloneNode(!0),o=g;return typeof o=="function"?o(e):g=e,w(e,()=>a().map(t=>(()=>{const m=D.cloneNode(!0);return T(()=>m.innerHTML=t.body.outerHTML),m})())),e}})),i})()};P(["input","click"]);R(()=>S(B,{}),document.getElementById("root"));
